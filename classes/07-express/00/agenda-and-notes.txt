WHAT IS EXPRESS.JS?
ADVANTAGES OF MOVING TO EXPRESS OR WHY ARE WE USING EXPRESS.JS?
HELLO WORLD IN EXPRESS.JS
CONVERTING PURE NODEJS SERVER WE BUILT IN LAST CLASS TO EXPRESS SERVER
KEY CHANGES IN CODE
TESTING USING POSTMAN
==================================================

WHAT IS EXPRESS.JS?
-------------------
Express.js is a minimal and flexible web application framework for Node.js that provides a robust set of features to build web and mobile applications, including routing, middleware, and templating. 

ADVANTAGES OF MOVING TO EXPRESS
-------------------------------
Ease of Use:
    Express takes care of the repetitive boilerplate code, allowing developers to focus on writing the actual business logic.

Middleware:
    Middleware functions in Express allow developers to modularize their code, making it easier to maintain, debug, and extend.

Scalability:
    With features like routing, middleware, and its flexibility, Express.js scales well with growing applications.

Error Handling:
    Express provides built-in mechanisms for handling errors gracefully across your application.

PURE NODE TO EXPRESS (CODE)
--------------------
    import express from 'express';

    const app = express();
    app.use(express.json()); // Middleware to parse JSON bodies

    // GET Request
    app.get('/api/items', (req, res) => {
    res.status(200).json({ message: 'GET request - Fetching all items' });
    });

    // POST Request
    app.post('/api/items', (req, res) => {
    const newItem = req.body;
    res.status(201).json({ message: 'POST request - Adding new item', data: newItem });
    });

    // PUT Request
    app.put('/api/items/:id', (req, res) => {
    const updatedItem = req.body;
    const itemId = req.params.id;
    res.status(200).json({ message: `PUT request - Updating item ${itemId}`, data: updatedItem });
    });

    // DELETE Request
    app.delete('/api/items/:id', (req, res) => {
    const itemId = req.params.id;
    res.status(200).json({ message: `DELETE request - Deleting item ${itemId}` });
    });

    // Start the server
    const PORT = 3000;
    app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
    });
