In today's class, let's mimic a database using an array to represent a list of users. We'll create routes for adding a user, updating a user, deleting a user, and reading all users. These routes will handle the following CRUD (Create, Read, Update, Delete) operations:

GET request to fetch all users
POST request to add a new user
PUT request to update an existing user
DELETE request to delete a user

Server with User Management: Mimicking a Database
import express from 'express';

const app = express();
app.use(express.json()); // Middleware to parse JSON bodies

// Mimicking a database with an array of users
let users = [
  { id: 1, name: 'John Doe', email: 'john@example.com' },
  { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
];

// GET request to fetch all users
app.get('/api/users', (req, res) => {
  res.status(200).json({ message: 'Fetching all users', data: users });
});

// POST request to add a new user
app.post('/api/users', (req, res) => {
  const newUser = {
    id: users.length + 1, // Simple id increment
    ...req.body,          // Spread the user data from the request body
  };
  users.push(newUser);     // Add new user to the array
  res.status(201).json({ message: 'User added', data: newUser });
});

// PUT request to update an existing user
app.put('/api/users/:id', (req, res) => {
  const userId = parseInt(req.params.id, 10); // Get user ID from the URL
  const userIndex = users.findIndex(user => user.id === userId);
  
  if (userIndex !== -1) {
    const updatedUser = { ...users[userIndex], ...req.body }; // Update the user's info
    users[userIndex] = updatedUser;
    res.status(200).json({ message: `User ${userId} updated`, data: updatedUser });
  } else {
    res.status(404).json({ message: `User with id ${userId} not found` });
  }
});

// DELETE request to delete an existing user
app.delete('/api/users/:id', (req, res) => {
  const userId = parseInt(req.params.id, 10); // Get user ID from the URL
  const userIndex = users.findIndex(user => user.id === userId);

  if (userIndex !== -1) {
    const deletedUser = users.splice(userIndex, 1); // Remove the user from the array
    res.status(200).json({ message: `User ${userId} deleted`, data: deletedUser });
  } else {
    res.status(404).json({ message: `User with id ${userId} not found` });
  }
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
